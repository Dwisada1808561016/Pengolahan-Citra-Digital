# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'coba.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


#  I Made Arya Dwisada (1808561016)



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage
import cv2, imutils
import numpy

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(830, 651)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(50, 20, 711, 511))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_5 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout.addWidget(self.pushButton_5, 6, 3, 1, 1)
        self.pushButton_8 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_8.setObjectName("pushButton_8")
        self.gridLayout.addWidget(self.pushButton_8, 6, 4, 1, 1)
        self.pushButton_6 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_6.setObjectName("pushButton_6")
        self.gridLayout.addWidget(self.pushButton_6, 6, 2, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout.addWidget(self.pushButton_3, 5, 2, 1, 1)
        self.horizontalSlider_2 = QtWidgets.QSlider(self.layoutWidget)
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.gridLayout.addWidget(self.horizontalSlider_2, 4, 0, 1, 5)
        self.pushButton_7 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_7.setObjectName("pushButton_7")
        self.gridLayout.addWidget(self.pushButton_7, 5, 4, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 5, 0, 1, 1)
        self.horizontalSlider = QtWidgets.QSlider(self.layoutWidget)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.gridLayout.addWidget(self.horizontalSlider, 3, 0, 1, 5)
        self.label = QtWidgets.QLabel(self.layoutWidget)
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("download.jpg"))
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 5)
        self.pushButton_2 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 5, 1, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 5, 3, 1, 1)
        self.pushButton_9 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_9.setObjectName("pushButton_9")
        self.gridLayout.addWidget(self.pushButton_9, 7, 2, 1, 1)
        self.pushButton_10 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_10.setObjectName("pushButton_10")
        self.gridLayout.addWidget(self.pushButton_10, 7, 3, 1, 1)
        self.pushButton_11 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_11.setObjectName("pushButton_11")
        self.gridLayout.addWidget(self.pushButton_11, 7, 4, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 830, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.horizontalSlider.valueChanged['int'].connect(self.brightness_value)
        self.horizontalSlider_2.valueChanged['int'].connect(self.blur_value)
        self.pushButton.clicked.connect(self.loadImage)
        self.pushButton_2.clicked.connect(self.savePhoto)
        self.pushButton_3.clicked.connect(self.Grayscale)
        self.pushButton_4.clicked.connect(self.BlacknWhite)
        self.pushButton_7.clicked.connect(self.threshBin)
        self.pushButton_5.clicked.connect(self.threshTrunc)
        self.pushButton_6.clicked.connect(self.threshBin_Inv)
        self.pushButton_9.clicked.connect(self.threshTozero_Inv)
        self.pushButton_11.clicked.connect(self.flip)
        self.pushButton_10.clicked.connect(self.rotate)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


         #Added code here
        self.filename = None # Will hold the image address location
        self.tmp = None # Will hold the temporary image for display
        self.brightness_value_now = 0 # Updated brighness value
        self.blur_value_now = 0 # Updated blur value
        self._submit_counter = 0

    def loadImage(self):
        """ This function will load the user selected image
            and set it to label using the setPhoto funtion 
        """
        self.filename = QFileDialog.getOpenFileName(filter="Image(*.*)")[0]
        self.image = cv2.imread(self.filename)
        self.setPhoto(self.image)


    def setPhoto(self,image):
        """ This function will take image input and resize it 
            only for display purpose and convert it to QImage
            to set at the label.
        """
        self.tmp = image
        image = imutils.resize(image,width=400)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
        self.label.setPixmap(QtGui.QPixmap.fromImage(image))
        
    def brightness_value(self,value):
        """ This function will take value from the slider
            for the brightness from 0 to 99 
        """
        self.brightness_value_now = value
        print('Brightness:',value)
        self.filename = "brightness.jpg"
        self.update()

    
    def blur_value(self,value):
        """This funtion will take value from the slider
            for the blur from 0 t0 99
        """
        self.blur_value_now = value
        print('Blur :',value)
        self.filename = "blur.jpg"
        self.update()



    def changeBrightness(self,img,value):
        """This function will take an image (img) and the brightness
            value. It will perform the brightness change using OpenCv
            and after split, will merge the img and return it.
        """
        hsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
        h,s,v = cv2.split(hsv)
        lim = 255 - value
        v[v>lim] = 255
        v[v<=lim] += value
        final_hsv = cv2.merge((h,s,v))
        img = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
        return img


    def changeBlur(self, img, value):
        """This function will take the image and blur values as inputs.
            After perform blur operation using opencv function, it returns
            the image img.
        """
        kernel_size = (value+1, value+1) # +1 is to avoid 0
        img = cv2.blur(img, kernel_size)
        return img


    def update(self):
        """This function will update the photo according to the
            current values of blur and brightness and set it to photo label.
        """
        img = self.changeBrightness(self.image,self.brightness_value_now)
        img = self.changeBlur(img, self.blur_value_now)
        self.setPhoto(img)


    def Grayscale(self,image):
        img = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        self.filename = "gray.jpg"
        self.setPhoto(img)
        

    
    def BlacknWhite(self,image):
        grayImage = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        (thresh, img) = cv2.threshold(grayImage, 127, 255, cv2.THRESH_BINARY)
        self.filename = "BnW.jpg"
        self.setPhoto(img)

    
    def threshBin(self, image):
        (thresh, img) = cv2.threshold(self.image, 127, 255, cv2.THRESH_BINARY)
        self.filename = "threshold.jpg"
        self.setPhoto(img)
    

    def threshBin_Inv(self, image):
        (thresh, img) = cv2.threshold(self.image, 127, 255, cv2.THRESH_BINARY_INV)
        self.filename = "thresholdInv.jpg"
        self.setPhoto(img)
    

    def threshTrunc(self, image):
        (thresh, img) = cv2.threshold(self.image, 127, 255, cv2.THRESH_TRUNC)
        self.filename = "thresholdTrunc.jpg"
        self.setPhoto(img)


    def threshTozero(self, image):
        (thresh, img) = cv2.threshold(self.image, 127, 255, cv2.THRESH_TOZERO)
        self.filename = "thresholdTozero.jpg"
        self.setPhoto(img)

    
    def threshTozero_Inv(self, image):
        (thresh, img) = cv2.threshold(self.image, 127, 255, cv2.THRESH_TOZERO_INV)
        self.filename = "thresholdTozeroInv.jpg"
        self.setPhoto(img)

    def rotate(self, image):
        img = self.image
        h, w = img.shape[:2]
        # calculate the center of the image
        center = (w / 2, h / 2)

        angle_45 = -45
        angle_90 = -90
        angle_135 = -135
        angle540 = 540
        angle135 = 135
        angle_270 = -270
        angle45 = 45
        angle360 = 360

        scale = 1.0

        # perform the counterclockwise rotation holding at the center
        self._submit_counter += 1
        if (self._submit_counter == 1):
            M = cv2.getRotationMatrix2D(center, angle_45, scale)
            rotated45 = cv2.warpAffine(img, M, (h, w))
            img = rotated45
        elif (self._submit_counter == 2):
            M = cv2.getRotationMatrix2D(center, angle_90, scale)
            rotated_90 = cv2.warpAffine(img, M, (w, h))
            img = rotated_90
        elif (self._submit_counter == 3):
            M = cv2.getRotationMatrix2D(center, angle_135, scale)
            rotated_135 = cv2.warpAffine(img, M, (h, w))
            img = rotated_135
        elif (self._submit_counter == 4):
            M = cv2.getRotationMatrix2D(center, angle540, scale)
            rotated540 = cv2.warpAffine(img, M, (h, w))
            img = rotated540
        elif (self._submit_counter == 5):
            M = cv2.getRotationMatrix2D(center, angle135, scale)
            rotated135 = cv2.warpAffine(img, M, (h, w))
            img = rotated135
        elif (self._submit_counter == 6):
            M = cv2.getRotationMatrix2D(center, angle_270, scale)
            rotated_270 = cv2.warpAffine(img, M, (h, w))
            img = rotated_270
        elif (self._submit_counter == 7):
            M = cv2.getRotationMatrix2D(center, angle45, scale)
            rotated45 = cv2.warpAffine(img, M, (h, w))
            img = rotated45
        elif (self._submit_counter == 8):
            M = cv2.getRotationMatrix2D(center, angle360, scale)
            rotated360 = cv2.warpAffine(img, M, (h, w))
            img = rotated360
        else:
            self._submit_counter = 0
            return self._submit_counter
        self.filename = "rotate.jpg"
        self.setPhoto(img)

    def flip(self, image):
        self._submit_counter += 1
        if (self._submit_counter == 1):
            img = cv2.flip(self.image, 0)
        elif (self._submit_counter == 2):
            img = cv2.flip(self.image, 1)
        elif (self._submit_counter == 3):
            img = cv2.flip(self.image, -1)
        else:
            self._submit_counter = 0
            return self._submit_counter
        self.filename = "flip.jpg"
        self.setPhoto(img)


    def savePhoto(self):
        cv2.imwrite(self.filename, self.tmp)
        print('Image Saved as', self.filename)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_5.setText(_translate("MainWindow", "Threshold Trunc"))
        self.pushButton_8.setText(_translate("MainWindow", "Threshold Tozero"))
        self.pushButton_6.setText(_translate("MainWindow", "Threshold Inv"))
        self.pushButton_3.setText(_translate("MainWindow", "RGB to Grayscale"))
        self.pushButton_7.setText(_translate("MainWindow", "Threshold"))
        self.pushButton.setText(_translate("MainWindow", "Browse"))
        self.pushButton_2.setText(_translate("MainWindow", "Save"))
        self.pushButton_4.setText(_translate("MainWindow", "RGB to BlackWhite"))
        self.pushButton_9.setText(_translate("MainWindow", "Threshold Tozero Inv"))
        self.pushButton_10.setText(_translate("MainWindow", "Rotate"))
        self.pushButton_11.setText(_translate("MainWindow", "Flip"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
